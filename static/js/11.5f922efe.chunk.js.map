{"version":3,"sources":["components/UnlockButton.tsx","utils/makeBatchRequest.ts","hooks/referrals/useGetReferralData.ts","views/Referrals/Referrals.tsx"],"names":["UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","makeBatchRequest","calls","batch","getWeb3NoAccount","BatchRequest","promises","map","call","Promise","resolve","reject","add","request","err","result","execute","all","useGetReferralData","useState","totalReferrals","totalReferralCommissions","state","setState","account","useWeb3React","contract","useReferralContract","useEffect","a","methods","referralsCount","numReferrals","commissionsEarned","prevState","getBalanceNumber","toString","fetchReferralData","setTotalReferrals","setTotalCommissions","Cards","styled","BaseLayout","theme","mediaQueries","sm","lg","Header","div","colors","gradients","bubblegum","Referrals","referralData","COPY_TEXT","icapAddress","convertToIcap","buttonCopyText","setCopyButtonText","timer","setTimeout","clearTimeout","as","scale","textAlign","color","mb","Container","parseFloat","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","BASE_URL","mt","navigator","clipboard","writeText","size","mx","bold","fontSize"],"mappings":"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","file":"static/js/11.5f922efe.chunk.js","sourcesContent":["import React from 'react'\nimport { Button, useWalletModal } from '@ricefarm/uikitv2'\nimport useAuth from 'hooks/useAuth'\nimport { useTranslation } from 'contexts/Localization'\n\nconst UnlockButton = (props) => {\n  const { t } = useTranslation()\n  const { login, logout } = useAuth()\n  const { onPresentConnectModal } = useWalletModal(login, logout)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {t('Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { getWeb3NoAccount } from './web3'\n\n/**\n * Accepts an array of contract method calls and batches them\n *\n * Example:\n *\n * [\n *  contract.method.balanceOf().call,\n *  contract.method.startBlockNumber().call\n * ]\n */\nconst makeBatchRequest = (calls: any[]) => {\n  try {\n    const web3 = getWeb3NoAccount()\n    const batch = new web3.BatchRequest()\n\n    const promises = calls.map((call) => {\n      return new Promise((resolve, reject) => {\n        batch.add(\n          call.request({}, (err, result) => {\n            if (err) {\n              reject(err)\n            } else {\n              resolve(result)\n            }\n          }),\n        )\n      })\n    })\n\n    batch.execute()\n\n    return Promise.all(promises)\n  } catch {\n    return null\n  }\n}\n\nexport default makeBatchRequest\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useReferralContract } from 'hooks/useContract'\nimport makeBatchRequest from 'utils/makeBatchRequest'\nimport { ReferralData, ReferralState } from './types'\nimport { getBalanceNumber } from '../../utils/formatBalance'\n\n/**\n * Gets all referral data\n */\nconst useGetReferralData = (): ReferralData => {\n  const [state, setState] = useState<ReferralState>({\n    totalReferrals: null,\n    totalReferralCommissions: null,\n  })\n\n  const { account } = useWeb3React()\n  const contract = useReferralContract()\n\n  const setTotalReferrals = (numReferrals: string) =>\n    setState((prevState) => ({\n      ...prevState,\n      totalReferrals: numReferrals,\n    }))\n\n  const setTotalCommissions = (commissionsEarned: string) => {\n    setState((prevState) => ({\n      ...prevState,\n      totalReferralCommissions: commissionsEarned,\n    }))\n  }\n\n  useEffect(() => {\n    const fetchReferralData = async () => {\n      const [numReferrals, commissionsEarned] = (await makeBatchRequest([\n        contract.methods.referralsCount(account).call,\n        contract.methods.totalReferralCommissions(account).call,\n      ])) as [string, BigNumber]\n\n      setState((prevState) => ({\n        ...prevState,\n        totalReferrals: numReferrals,\n        totalReferralCommissions: getBalanceNumber(commissionsEarned).toString(),\n      }))\n    }\n\n    if (account) {\n      fetchReferralData()\n    }\n  }, [account, contract, setState])\n\n  return { ...state, setTotalReferrals, setTotalCommissions }\n}\n\nexport default useGetReferralData\n","import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport UnlockButton from 'components/UnlockButton'\nimport { Text, Heading, Card, CardHeader, CardBody, Button, BaseLayout } from '@ricefarm/uikitv2'\nimport Container from 'components/Layout/Container'\n\nimport { BASE_URL } from '../../config'\nimport useGetReferralData from '../../hooks/referrals/useGetReferralData'\nimport { convertToIcap } from '../../utils/referralHelpers'\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Header = styled.div`\n  padding: 32px 0px;\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n\n  padding-left: 16px;\n  padding-right: 16px;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nconst Referrals = () => {\n  const referralData = useGetReferralData()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const COPY_TEXT = 'Copy'\n  const COPIED_TEXT = 'Copied'\n  const icapAddress = convertToIcap(account)\n\n  const [buttonCopyText, setCopyButtonText] = useState(COPY_TEXT)\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setCopyButtonText(COPY_TEXT)\n    }, 2000)\n    return () => clearTimeout(timer)\n  }, [buttonCopyText])\n\n  if (!account) {\n    return (\n      <>\n        <Header>\n          <Heading as=\"h1\" size=\"lg\" textAlign=\"center\" color=\"secondary\" mb=\"24px\">\n            {t('StoneFarm Referral Program')}\n          </Heading>\n          <Heading size=\"md\" textAlign=\"center\" color=\"text\">\n            {t(\"Share the referral link below to invite your friends and earn 1% of your friends' earnings FOREVER!\")}\n          </Heading>\n        </Header>\n        <Container>\n          <Card>\n            <CardBody>\n              <Text textAlign=\"center\" mb=\"16px\">\n                <UnlockButton mx=\"auto\" />\n              </Text>\n              <Text textAlign=\"center\" bold fontSize=\"20px\">\n                Unlock wallet to get your unique referral link\n              </Text>\n            </CardBody>\n          </Card>\n        </Container>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Header>\n        <Heading as=\"h1\" scale=\"xl\" textAlign=\"center\" color=\"secondary\" mb=\"24px\">\n          {t('StoneFarm Referral Program')}\n        </Heading>\n        <Heading scale=\"md\" textAlign=\"center\" color=\"text\">\n          {t(\"Share the referral link below to invite your friends and earn 1% of your friends' earnings FOREVER!\")}\n        </Heading>\n      </Header>\n      <Container>\n        <Cards>\n          <Card>\n            <CardHeader>\n              <Heading scale=\"lg\" textAlign=\"center\" color=\"secondary\">\n                {t(`Total Referrals`)}\n              </Heading>\n            </CardHeader>\n            <CardBody>\n              <Text textAlign=\"center\" mb=\"16px\">\n                {referralData.totalReferrals ? referralData.totalReferrals : '-'}\n              </Text>\n            </CardBody>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <Heading scale=\"lg\" textAlign=\"center\" color=\"secondary\">\n                {t(`Total Referral Commission`)}\n              </Heading>\n            </CardHeader>\n            <CardBody>\n              <Text textAlign=\"center\" mb=\"16px\">\n                {referralData.totalReferralCommissions\n                  ? parseFloat(referralData.totalReferralCommissions).toLocaleString(undefined, {\n                      minimumFractionDigits: 4,\n                      maximumFractionDigits: 4,\n                    })\n                  : '-'}{' '}\n                STONE\n              </Text>\n            </CardBody>\n          </Card>\n        </Cards>\n        <Card>\n          <CardHeader>\n            <Heading scale=\"lg\" textAlign=\"center\" color=\"secondary\">\n              {t(`Your Referral Link`)}\n            </Heading>\n          </CardHeader>\n          <CardBody>\n            <Text textAlign=\"center\" mb=\"16px\">\n              {`${BASE_URL}/?ref=${icapAddress}`}\n              <br />\n              <Button\n                scale=\"sm\"\n                mt=\"12px\"\n                onClick={() => {\n                  navigator.clipboard.writeText(`${BASE_URL}/?ref=${icapAddress}`)\n                  setCopyButtonText(COPIED_TEXT)\n                }}\n              >\n                {buttonCopyText}\n              </Button>\n            </Text>\n          </CardBody>\n        </Card>\n        <br />\n        <Text textAlign=\"center\" color=\"text\">\n          *Referral link is for farming earnings only and not stone purchases. <br />\n          **The 1% is not taken from your referrals, therefore no one loses any Stone. Everyone wins!\n        </Text>\n      </Container>\n    </>\n  )\n}\n\nexport default Referrals\n"],"sourceRoot":""}